<?xml version="1.0" encoding="UTF-8"?>
<assessmentItem
 xmlns="http://www.imsglobal.org/xsd/imsqti_v2p1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:ma="http://mathassess.qtitools.org/xsd/mathassess"
 xsi:schemaLocation="http://www.imsglobal.org/xsd/imsqti_v2p1 http://www.imsglobal.org/xsd/imsqti_v2p1.xsd
 http://mathassess.qtitools.org/xsd/mathassess mathassess.xsd"
 xmlns:m="http://www.w3.org/1998/Math/MathML" adaptive="false" timeDependent="false"
 identifier="MAD01-SRinCO-demo" title="Expand brackets in a(x+b)+cx (a,b,c +ve) and simplify">
<!--
template processing with randomisation using ScriptRule, MathEntryInteraction and casCompare in response processing
ensure no -ve coeffs
-->
    <responseDeclaration identifier="RESPONSE" cardinality="record" />
    <responseDeclaration baseType="string" cardinality="single" identifier="printMath" />
    <responseDeclaration baseType="boolean" cardinality="single" identifier="HINTREQUEST"/>
    <responseDeclaration baseType="boolean" cardinality="single" identifier="SOLREQUEST"/>
    <outcomeDeclaration identifier="SCORE" cardinality="single" baseType="float">
        <defaultValue>
            <value>0.0</value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration identifier="FEEDBACK" cardinality="single" baseType="identifier"/>
    <outcomeDeclaration identifier="seenSolution" cardinality="single" baseType="boolean">
        <defaultValue>
            <value>false</value>
        </defaultValue>
    </outcomeDeclaration>
    <outcomeDeclaration identifier="seenHint" cardinality="single" baseType="boolean">
        <defaultValue>
            <value>false</value>
        </defaultValue>
    </outcomeDeclaration>
    <!-- add template processing, using QTIv2.1 native elements -->
    <templateDeclaration baseType="boolean"
        cardinality="single" identifier="keepRandomSeed" mathVariable="false"
        paramVariable="false" />
    <templateDeclaration baseType="integer" cardinality="single" identifier="iRandomSeed"
        mathVariable="false" paramVariable="false"/>
    <templateDeclaration baseType="boolean" cardinality="single" identifier="dummy" mathVariable="false" paramVariable="false"/>
     <templateDeclaration baseType="identifier" cardinality="multiple" identifier="showSolParts" mathVariable="false" paramVariable="false" />
    <templateDeclaration baseType="integer" cardinality="single" identifier="iA" mathVariable="true"
        paramVariable="false">
        <defaultValue>
                <value>0</value>
        </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsA"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iB" mathVariable="true"
        paramVariable="false">
        <defaultValue>
        <value>0</value>
    </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsB"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iC" mathVariable="true"
        paramVariable="false">
        <defaultValue>
         <value>0</value>
        </defaultValue>
    </templateDeclaration>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAB"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iAbsAB"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBadSignAB"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="single" identifier="iApC"
        mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mX" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mQues" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mAns" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBad1" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBad2" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBad3" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBad4" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBad5" mathVariable="true" paramVariable="false"/>
    <templateDeclaration cardinality="record" identifier="mBad6" mathVariable="true" paramVariable="false"/>
    <templateDeclaration baseType="integer" cardinality="ordered" identifier="iRandomState"
        mathVariable="false" paramVariable="false"/>
    <templateProcessing>
        <!-- now do the randomisation and mathematical calculations, using maxima -->
        <setTemplateValue identifier="dummy">
            <customOperator class="org.qtitools.mathassess.ScriptRule"  ma:syntax="text/x-maxima">
              <baseValue baseType="string">
              <![CDATA[
                simp:true;
                s1 : make_random_state(true)$ set_random_state(s1);
                for iI:1 step 1 unless (not(abs(iA)=1) and not((iA+iC)=0) and not(abs(iA+iC)=1) and not(abs(iC)=0) and gcd(iA*iB,iA+iC)=1) do block(
                  iA: ev((random(9)+1),simp),
                  iB: ev((random(9)+1),simp),
                  iC: ev((random(9)+1),simp));
                iAbsA: ev(abs(iA),simp);
                iAbsB: ev(abs(iB),simp);
                iAbsC: ev(abs(iC),simp);
                iAB: ev(iA*iB,simp);
                iAbsAB: ev(abs(iAB),simp);
                iApC: ev(iA+iC,simp);
                array(aarr,19);
                fillarray(aarr,[a,b,c,d,g,h,k,m,n,p,q,r,s,t,u,v,w,x,y,z]);
                mX:aarr[random(19)];
                simp:false;
                mQues:iA*(mX+iB)+iC*mX;
                mAns:ev(expand(mQues),simp);
                mBad1:iAB+iApC*mX;
                mBad2:iA*mX+iAB+iC*mX;
                mBad3:iApC*mX+iB;
                mBad4:ev((1+iC)*mX,simp)+iAB;
                mBad5:iApC*mX-iAB;
                mBad6:iA*(mX+iB)+iC*mX;
                ]]>
              </baseValue>
            </customOperator>
        </setTemplateValue>
    </templateProcessing>
    <itemBody>
        <!-- templateVariables are used in the question statement, choices and feedback,
        including some of type string with mathVariable set; printedVariable for these should produce MathML -->
        <p>Expand the brackets in <m:math>
                    <m:semantics>
                        <m:mrow>
                            <m:mi>iA</m:mi>
                            <m:mo>(</m:mo>
                            <m:mi>mX</m:mi>
                            <!-- Using variable substitution for our random letter (QTI extension) -->
                            <m:mo>+</m:mo>
                            <!-- Using variable substitution in mo (QTI extension) -->
                            <m:mi>iAbsB</m:mi>
                            <m:mo>)</m:mo>
                            <m:mo>+</m:mo>
                            <!-- Using variable substitution in mo (QTI extension) -->
                            <m:mi>iAbsC</m:mi>
                            <m:mi>mX</m:mi>
                            <!-- Using variable substitution for our random letter (QTI extension) -->
                        </m:mrow>
                        <m:annotation encoding='LaTeX'>\[\qv{iA}(\qv{mX}+\qv{iAbsB})+\qv{iAbsC}\qv{mX}\]</m:annotation>
                    </m:semantics>
            </m:math> and simplify the result. </p>
            <table>
                <tbody>
                    <tr>
                        <td>
                            <customInteraction class="org.qtitools.mathassess.MathEntryInteraction" responseIdentifier="RESPONSE" ma:syntax="text/x-maxima" ma:expectedLength="20" ma:printIdentifier="printMath" />
                        </td>
                        <td>
                            <feedbackInline identifier="CORRECT" outcomeIdentifier="FEEDBACK" showHide="show">
                                Correct
                            </feedbackInline>
                            <feedbackInline identifier="CORRECT-ORD" outcomeIdentifier="FEEDBACK" showHide="show">
                                Your answer is correct, but it would be more usual to write it in the form &#160;&#160;
                                <m:math display="block">
                                        <m:semantics>
                                            <m:mrow>
                                                <m:mi>iApC</m:mi>
                                                <m:mi>mX</m:mi>
                                                <!-- Using string variable substitution for our random letter (QTI extension) -->
                                                <m:mo>+</m:mo>
                                                <!-- Using string variable substitution in mo (QTI extension) -->
                                                <m:mi>iAbsAB</m:mi>
                                            </m:mrow>
                                            <m:annotation encoding='LaTeX'>\[\qv{iApC}\qv{mX}+\qv{iAbsAB}\]</m:annotation>
                                        </m:semantics>
                                </m:math>.
                            </feedbackInline>
                            <feedbackInline identifier="NOT-SIMP" outcomeIdentifier="FEEDBACK" showHide="show">
                                You have expanded the bracket correctly but failed to simplify as the question asks.
                            </feedbackInline>
                            <feedbackInline identifier="NOT-ALL-MULT" outcomeIdentifier="FEEDBACK" showHide="show">
                                Remember that, when expanding brackets, all terms inside must be multiplied by whatever is outside.
                                However, you got one term in the answer correct.
                            </feedbackInline>
                            <feedbackInline identifier="WRONG-SIGN-CONSTANT" outcomeIdentifier="FEEDBACK" showHide="show">
                                When expanding the bracket the product of <printedVariable identifier="iA" /> and <printedVariable identifier="iB" /> is <printedVariable identifier="iAB" />.
                                However, you got one term in the answer correct.
                            </feedbackInline>
                            <feedbackInline identifier="ORIG-EXPR" outcomeIdentifier="FEEDBACK" showHide="show">
                                Your input is equivalent to the expression we started with!
                            </feedbackInline>
                            <feedbackInline identifier="INCORRECT" outcomeIdentifier="FEEDBACK" showHide="show">
                                You should ask for tutor help on this question.
                            </feedbackInline>
                        </td>
                    </tr>
                </tbody>
            </table>

        <feedbackBlock identifier="SOLUTION" outcomeIdentifier="FEEDBACK" showHide="show">
            <table>
                <tbody>
                    <tr>
                        <td>
                            <m:math display="block">
                                    <m:semantics>
                                        <m:mrow>
                                            <m:mi>iA</m:mi>
                                            <m:mo>(</m:mo>
                                            <m:mi>mX</m:mi>
                                            <!-- Using string variable substitution for our random letter (QTI extension) -->
                                            <m:mo>+</m:mo>
                                            <!-- Using string variable substitution in mo (QTI extension) -->
                                            <m:mi>iAbsB</m:mi>
                                            <m:mo>)</m:mo>
                                            <m:mo>+</m:mo>
                                            <!-- Using string variable substitution in mo (QTI extension) -->
                                            <m:mi>iAbsC</m:mi>
                                            <m:mi>mX</m:mi>
                                            <!-- Using string variable substitution for our random letter (QTI extension) -->
                                        </m:mrow>
                                        <m:annotation encoding='LaTeX'>\[= \qv{iA}(\qv{mX}+\qv{iAbsB})+\qv{iAbsC}\qv{mX}\]</m:annotation>
                                    </m:semantics>
                            </m:math>
                        </td>
                        <td>
                            <m:math display="block">
                                    <m:semantics>
                                        <m:mrow>
                                            <m:mo>=</m:mo>
                                            <m:mrow>
                                                <m:mi>iA</m:mi>
                                                <m:mo>&#xd7;</m:mo>
                                                <m:mi>mX</m:mi>
                                            </m:mrow>
                                            <m:mo>+</m:mo>
                                            <m:mrow>
                                                <m:mi>iAbsA</m:mi>
                                                <m:mo>&#xd7;</m:mo>
                                                <m:mi>iAbsB</m:mi>
                                            </m:mrow>
                                            <m:mo>+</m:mo>
                                            <m:mrow>
                                                <m:mi>iAbsC</m:mi>
                                                <m:mo>&#xd7;</m:mo>
                                                <m:mi>mX</m:mi>
                                            </m:mrow>
                                        </m:mrow>
                                        <m:annotation encoding='LaTeX'>\[= \qv{iA} \times \qv{mX} + \qv{iAbsA} \times \qv{iAbsB} + \qv{iAbsC} \times \qv{mX}\]</m:annotation>
                                    </m:semantics>
                            </m:math>
                        </td>
                    </tr>
                    <tr>
                        <td>&#160;</td>
                        <td>
                            <m:math display="block">
                                    <m:semantics>
                                        <m:mrow>
                                            <m:mo>=</m:mo>
                                            <m:mi>iApC</m:mi>
                                            <m:mi>mX</m:mi>
                                            <!-- Using string variable substitution for our random letter (QTI extension) -->
                                            <m:mo>+</m:mo>
                                            <!-- Using string variable substitution in mo (QTI extension) -->
                                            <m:mi>iAbsAB</m:mi>
                                        </m:mrow>
                                        <m:annotation encoding='LaTeX'>\[= \qv{iApC} \qv{mX} + \qv{iAbsAB}\]</m:annotation>
                                    </m:semantics>
                            </m:math>
                        </td>
                    </tr>
                </tbody>
            </table>
        </feedbackBlock>
        <feedbackBlock identifier="HINT" outcomeIdentifier="FEEDBACK" showHide="show">
            <p>Expand the bracket and collect like terms.</p>
        </feedbackBlock>
        <p>
            <endAttemptInteraction responseIdentifier="HINTREQUEST" title="Show Hint"/>
            <endAttemptInteraction responseIdentifier="SOLREQUEST" title="Show Solution"/>
        </p>
    </itemBody>
    <responseProcessing>
        <!-- basic match, includes feedback on specific errors -->
        <responseCondition>
            <responseIf>
                <variable identifier="HINTREQUEST"/>
                <setOutcomeValue identifier="FEEDBACK">
                    <baseValue baseType="identifier">HINT</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="seenHint">
                    <baseValue baseType="boolean">true</baseValue>
                </setOutcomeValue>
            </responseIf>
            <responseElseIf>
                <variable identifier="SOLREQUEST"/>
                <setOutcomeValue identifier="FEEDBACK">
                    <baseValue baseType="identifier">SOLUTION</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="seenSolution">
                    <baseValue baseType="boolean">true</baseValue>
                </setOutcomeValue>
                <setOutcomeValue identifier="completionStatus">
                    <baseValue baseType="identifier">completed</baseValue>
                </setOutcomeValue>
            </responseElseIf>
            <responseElse>
                <responseCondition>
                   <responseIf>
                        <isNull>
                            <variable identifier="RESPONSE"/>
                        </isNull>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">0</baseValue>
                        </setOutcomeValue>
                    </responseIf>
                    <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                               <variable identifier = "mAns"/>
                           </customOperator>
                            <setOutcomeValue identifier="FEEDBACK">
                                <baseValue baseType="identifier">CORRECT</baseValue>
                            </setOutcomeValue>
                            <setOutcomeValue identifier="SCORE">
                                <baseValue baseType="float">2</baseValue>
                            </setOutcomeValue>
                   </responseElseIf>
                   <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                            <variable identifier = "mBad1"/>
                           </customOperator>
                            <setOutcomeValue identifier="FEEDBACK">
                                <baseValue baseType="identifier">CORRECT-ORD</baseValue>
                            </setOutcomeValue>
                            <setOutcomeValue identifier="SCORE">
                                <baseValue baseType="float">2</baseValue>
                            </setOutcomeValue>
                    </responseElseIf>
                    <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                            <variable identifier = "mBad2"/>
                           </customOperator>
                            <setOutcomeValue identifier="FEEDBACK">
                                <baseValue baseType="identifier">NOT-SIMP</baseValue>
                            </setOutcomeValue>
                            <setOutcomeValue identifier="SCORE">
                                <baseValue baseType="float">1</baseValue>
                            </setOutcomeValue>
                    </responseElseIf>
                    <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                            <variable identifier = "mBad3"/>
                           </customOperator>
                            <setOutcomeValue identifier="FEEDBACK">
                                <baseValue baseType="identifier">NOT-ALL-MULT</baseValue>
                            </setOutcomeValue>
                            <setOutcomeValue identifier="SCORE">
                                <baseValue baseType="float">1</baseValue>
                            </setOutcomeValue>
                    </responseElseIf>
                    <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                            <variable identifier = "mBad4"/>
                           </customOperator>
                        <setOutcomeValue identifier="FEEDBACK">
                            <baseValue baseType="identifier">NOT-ALL-MULT</baseValue>
                        </setOutcomeValue>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">1</baseValue>
                        </setOutcomeValue>
                    </responseElseIf>
                    <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                            <variable identifier = "mBad5"/>
                           </customOperator>
                            <setOutcomeValue identifier="FEEDBACK">
                                <baseValue baseType="identifier">WRONG-SIGN-CONSTANT</baseValue>
                            </setOutcomeValue>
                            <setOutcomeValue identifier="SCORE">
                                <baseValue baseType="float">1</baseValue>
                            </setOutcomeValue>
                    </responseElseIf>
                   <responseElseIf>
                        <customOperator class ="org.qtitools.mathassess.CasCompare" ma:syntax="text/x-maxima" ma:action="syntequal" ma:simplify="false">
                            <variable identifier = "RESPONSE"/>
                            <variable identifier = "mBad6"/>
                           </customOperator>
                            <setOutcomeValue identifier="FEEDBACK">
                                <baseValue baseType="identifier">ORIG-EXPR</baseValue>
                            </setOutcomeValue>
                            <setOutcomeValue identifier="SCORE">
                                <baseValue baseType="float">0</baseValue>
                            </setOutcomeValue>
                    </responseElseIf>
                    <responseElse>
                    <setOutcomeValue identifier="FEEDBACK">
                        <baseValue baseType="identifier">INCORRECT</baseValue>
                    </setOutcomeValue>
                        <setOutcomeValue identifier="SCORE">
                            <baseValue baseType="float">0</baseValue>
                        </setOutcomeValue>
                    </responseElse>
                </responseCondition>
            </responseElse>
        </responseCondition>
        <responseCondition>
            <responseIf>
                <variable identifier="seenSolution"/>
                <setOutcomeValue identifier="SCORE">
                    <baseValue baseType="float">0.0</baseValue>
                </setOutcomeValue>
            </responseIf>
            <responseElseIf>
                <variable identifier="seenHint"/>
                <setOutcomeValue identifier="SCORE">
                    <divide>
                        <variable identifier="SCORE"/>
                        <baseValue baseType="float">2.0</baseValue>
                    </divide>
                </setOutcomeValue>
            </responseElseIf>
        </responseCondition>
    </responseProcessing>
</assessmentItem>

